#! /bin/zsh

# m6: zsh reconvert ../data/m6  480.37s user 7.20s system 99% cpu 8:07.94 total

# afaSimpGoblin4 \
# afaCnf4 \
# sepDelaying4 \
# afaSimpMincut5 \
# afaCnf5 \
# sepDelaying5 \
# afaCnf0 \
# sepDelaying0 \

READAFA="afai:100"
GENERATE=true
MODELCHECK=false

FROM_LTL=false
FROM_STRANGER=false
BASIC=true
GOBLIN3=true
NRAND=true
RAND=false
ZERO=false

SUCCINCT=true
AFASAT=false
AFASAT_CLAUSAL=false
DANTONI=false
JIMPACT=false
ABC=true
ABC_REV=false

ROOT=$1

export LD_LIBRARY_PATH=$HOME/.local/lib:$PWD/target/release

resetDir() {
  rm $ROOT/$1/*
  mkdir -p $ROOT/$1
}

{$AFASAT || $AFASAT_CLAUSAL} && AFASAT_ANY=true || AFASAT_ANY=false

$GENERATE && {
  {$FROM_LTL || $FROM_STRANGER} && resetDir afa0

  $NRAND && $BASIC   && $SUCCINCT   && resetDir afaBasic
  $NRAND && $GOBLIN3 && $SUCCINCT   && resetDir afaSimpGoblinMincut3
  $NRAND && $BASIC   && $AFASAT_ANY && resetDir afaCnf
  $NRAND && $GOBLIN3 && $AFASAT_ANY && resetDir afaCnf3
  $NRAND && $BASIC   && $DANTONI    && resetDir sepDelaying
  $NRAND && $GOBLIN3 && $DANTONI    && resetDir sepDelaying3
  $NRAND && $BASIC   && $JIMPACT    && resetDir ada
  $NRAND && $GOBLIN3 && $JIMPACT    && resetDir ada3
  $NRAND && $BASIC   && $ABC        && resetDir smv
  $NRAND && $GOBLIN3 && $ABC        && resetDir smv3
  $NRAND && $BASIC   && $ABC_REV    && resetDir smvReverse
  $NRAND && $GOBLIN3 && $ABC_REV    && resetDir smvReverse3
  $NRAND && $BASIC   && $ABC        && resetDir aig
  $NRAND && $GOBLIN3 && $ABC        && resetDir aig3
  $NRAND && $BASIC   && $ABC_REV    && resetDir aigReverse
  $NRAND && $GOBLIN3 && $ABC_REV    && resetDir aigReverse3

  $ZERO && resetDir smv0
  $ZERO && resetDir aig0

  $RAND && $BASIC   && $SUCCINCT   && resetDir afaRand
  $RAND && $GOBLIN3 && $SUCCINCT   && resetDir afaRand3
  $RAND && $BASIC   && $AFASAT_ANY && resetDir afaCnfRand
  $RAND && $GOBLIN3 && $AFASAT_ANY && resetDir afaCnfRand3
  $RAND && $BASIC   && $DANTONI    && resetDir sepDelayingRand
  $RAND && $GOBLIN3 && $DANTONI    && resetDir sepDelayingRand3
  $RAND && $BASIC   && $JIMPACT    && resetDir adaRand
  $RAND && $GOBLIN3 && $JIMPACT    && resetDir adaRand3
  $RAND && $BASIC   && $ABC        && resetDir smvRand
  $RAND && $GOBLIN3 && $ABC        && resetDir smvRand3
  $RAND && $BASIC   && $ABC_REV    && resetDir smvReverseRand
  $RAND && $GOBLIN3 && $ABC_REV    && resetDir smvReverseRand3
  $RAND && $BASIC   && $ABC        && resetDir aigRand
  $RAND && $GOBLIN3 && $ABC        && resetDir aigRand3
  $RAND && $BASIC   && $ABC_REV    && resetDir aigReverseRand
  $RAND && $GOBLIN3 && $ABC_REV    && resetDir aigReverseRand3

  $FROM_LTL && { cat $1/ltls| cabal exec ltle-to-afa -- -i ltl -o afa:$1/afa0 > $1/afa0.csv }
  $FROM_STRANGER && { cabal exec ltle-to-afa -- -i stranger:$1/input -o afa:$1/afa0 > $1/afa0.csv }

  $ZERO && {
    # cabal exec ltle-to-afa -- -i $READAFA:$1/afa0 -o cnfafa:$1/afaCnf0 > $1/afaCnf0.csv
    # cabal exec ltle-to-afa -- -i $READAFA:$1/afa0 -o sepafaDelaying:$1/sepDelaying0 > $1/sepDelaying0.csv
    $ABC && cabal exec ltle-to-afa -- -i $READAFA:$1/afa0 -o smv:$1/smv0 > $1/smv0.csv
    $ABC && for f in $(ls $1/smv0); do ../aiger/smvtoaig $1/smv0/$f > $1/aig0/$f; done
  }

  $NRAND && $BASIC && {
    $SUCCINCT   && cabal exec ltle-to-afa -- -i $READAFA:$1/afa0 -o afaBasicSimp:$1/afaBasic > $1/afaBasic.csv
    $AFASAT_ANY && cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o cnfafa:$1/afaCnf > $1/afaCnf.csv
    $DANTONI    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o sepafaDelaying:$1/sepDelaying > $1/sepDelaying.csv
    $JIMPACT    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o ada:$1/ada > $1/ada.csv
    $ABC        && cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o smv:$1/smv > $1/smv.csv
    $ABC_REV    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o smvReverse:$1/smvReverse > $1/smvReverse.csv
    $ABC        && for f in $(ls $1/smv); do ../aiger/smvtoaig $1/smv/$f > $1/aig/$f; done
    $ABC_REV    && for f in $(ls $1/smvReverse); do ../aiger/smvtoaig $1/smvReverse/$f > $1/aigReverse/$f; done
  }

  $RAND && $BASIC && {
    $SUCCINCT   && cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o afaRandomized:$1/afaRand > $1/afaRand.csv
    $AFASAT_ANY && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand -o cnfafa:$1/afaCnfRand > $1/afaCnfRand.csv
    $DANTONI    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand -o sepafaDelaying:$1/sepDelayingRand > $1/sepDelayingRand.csv
    $JIMPACT    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand -o ada:$1/adaRand > $1/adaRand.csv
    $ABC        && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand -o smv:$1/smvRand > $1/smvRand.csv
    $ABC_REV    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand -o smvReverse:$1/smvReverseRand > $1/smvReverseRand.csv
    $ABC        && for f in $(ls $1/smvRand); do ../aiger/smvtoaig $1/smvRand/$f > $1/aigRand/$f; done
    $ABC_REV    && for f in $(ls $1/smvReverseRand); do ../aiger/smvtoaig $1/smvReverseRand/$f > $1/aigReverseRand/$f; done
  }

  $NRAND && $GOBLIN3 && {
    $SUCCINCT   && cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o afaSimpGoblinMincut:$1/afaSimpGoblinMincut3 > $1/afaSimpGoblinMincut3.csv
    $AFASAT_ANY && cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpGoblinMincut3 -o cnfafa:$1/afaCnf3 > $1/afaCnf3.csv
    $DANTONI    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpGoblinMincut3 -o sepafaDelaying:$1/sepDelaying3 > $1/sepDelaying3.csv
    $JIMPACT    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpGoblinMincut3 -o ada:$1/ada3 > $1/ada3.csv
    $ABC        && cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpGoblinMincut3 -o smv:$1/smv3 > $1/smv3.csv
    $ABC_REV    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpGoblinMincut3 -o smvReverse:$1/smvReverse3 > $1/smvReverse3.csv
    $ABC        && for f in $(ls $1/smv3); do ../aiger/smvtoaig $1/smv3/$f > $1/aig3/$f; done
    $ABC_REV    && for f in $(ls $1/smvReverse3); do ../aiger/smvtoaig $1/smvReverse3/$f > $1/aigReverse3/$f; done
  }

  $RAND && $GOBLIN3 && {
    $SUCCINCT   && cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpGoblinMincut3 -o afaRandomized:$1/afaRand3 > $1/afaRand3.csv
    $AFASAT_ANY && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand3 -o cnfafa:$1/afaCnfRand3 > $1/afaCnfRand3.csv
    $DANTONI    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand3 -o sepafaDelaying:$1/sepDelayingRand3 > $1/sepDelayingRand3.csv
    $JIMPACT    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand3 -o ada:$1/adaRand3 > $1/adaRand3.csv
    $ABC        && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand3 -o smv:$1/smvRand3 > $1/smvRand3.csv
    $ABC_REV    && cabal exec ltle-to-afa -- -i $READAFA:$1/afaRand3 -o smvReverse:$1/smvReverseRand3 > $1/smvReverseRand3.csv
    $ABC        && for f in $(ls $1/smvRand3); do ../aiger/smvtoaig $1/smvRand3/$f > $1/aigRand3/$f; done
    $ABC_REV    && for f in $(ls $1/smvReverseRand3); do ../aiger/smvtoaig $1/smvReverseRand3/$f > $1/aigReverseRand3/$f; done
  }

  # cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o afaSimpGoblin:$1/afaSimpGoblin4 > $1/afaSimpGoblin4.csv
  # cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpGoblin4 -o cnfafa:$1/afaCnf4 > $1/afaCnf4.csv
  # cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpGoblin4 -o sepafaDelaying:$1/sepDelaying4 > $1/sepDelaying4.csv

  # cabal exec ltle-to-afa -- -i $READAFA:$1/afaBasic -o afaSimpMincut:$1/afaSimpMincut5 > $1/afaSimpMincut5.csv
  # cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpMincut5 -o cnfafa:$1/afaCnf5 > $1/afaCnf5.csv
  # cabal exec ltle-to-afa -- -i $READAFA:$1/afaSimpMincut5 -o sepafaDelaying:$1/sepDelaying5 > $1/sepDelaying5.csv
}

$MODELCHECK || exit

cd ../afapipe

$NRAND && $BASIC   && $AFASAT         && ./build/file-solver-2 $1/afaCnf > $1/afasat.csv
$NRAND && $GOBLIN3 && $AFASAT         && ./build/file-solver-2 $1/afaCnf3 > $1/afasat3.csv
$NRAND && $BASIC   && $AFASAT_CLAUSAL && ./build/file-solver-3 $1/afaCnf > $1/afasatClausal.csv
$NRAND && $GOBLIN3 && $AFASAT_CLAUSAL && ./build/file-solver-3 $1/afaCnf3 > $1/afasatClausal3.csv
$NRAND && $BASIC   && $DANTONI        && ./build/file-solver-1 $1/sepDelaying > $1/dantoni.csv
$NRAND && $GOBLIN3 && $DANTONI        && ./build/file-solver-1 $1/sepDelaying3 > $1/dantoni3.csv

# ./build/file-solver-2 $1/afaCnf0 > $1/afasat0.csv
# ./build/file-solver-2 $1/afaCnf4 > $1/afasat4.csv
# ./build/file-solver-2 $1/afaCnf5 > $1/afasat5.csv
# ./build/file-solver-3 $1/afaCnf4 > $1/afasatClausal4.csv
# ./build/file-solver-3 $1/afaCnf5 > $1/afasatClausal5.csv
# ./build/file-solver-1 $1/sepDelaying0 > $1/dantoni0.csv
# ./build/file-solver-1 $1/sepDelaying4 > $1/dantoni4.csv
# ./build/file-solver-1 $1/sepDelaying5 > $1/dantoni5.csv

$RAND && $BASIC   && $AFASAT         && ./build/file-solver-2 $1/afaCnfRand > $1/afasatRand.csv
$RAND && $GOBLIN3 && $AFASAT         && ./build/file-solver-2 $1/afaCnfRand3 > $1/afasatRand3.csv
$RAND && $BASIC   && $AFASAT_CLAUSAL && ./build/file-solver-3 $1/afaCnfRand > $1/afasatClausalRand.csv
$RAND && $GOBLIN3 && $AFASAT_CLAUSAL && ./build/file-solver-3 $1/afaCnfRand3 > $1/afasatClausalRand3.csv
$RAND && $BASIC   && $DANTONI        && ./build/file-solver-1 $1/sepDelayingRand > $1/dantoniRand.csv
$RAND && $GOBLIN3 && $DANTONI        && ./build/file-solver-1 $1/sepDelayingRand3 > $1/dantoniRand3.csv

echo foo
$ZERO && {
  echo bar
  rm -f $1/abc0.csv
  for f in $(ls -v $1/aig0); do
    echo checking $f
    result=$(../abc/build/abc -c "read_aiger $1/aig0/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abc0.csv
  done
}

$NRAND && $BASIC && $ABC && {
  rm -f $1/abc.csv
  for f in $(ls -v $1/aig); do
    echo checking $f
    result=$(../abc/build/abc -c "read_aiger $1/aig/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abc.csv
  done
}

$NRAND && $GOBLIN3 && $ABC && {
  rm -f $1/abc3.csv
  for f in $(ls -v $1/aig3); do
    echo checking $f
    result=$(../abc/build/abc -c "read_aiger $1/aig3/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abc3.csv
  done
}

$NRAND && $BASIC && $ABC_REV && {
  rm -f $1/abcReverse.csv
  for f in $(ls -v $1/aigReverse); do
    echo checking $f
    result=$(../abc/build/abc -c "read_aiger $1/aigReverse/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abcReverse.csv
  done
}

$NRAND && $GOBLIN3 && $ABC_REV && {
  rm -f $1/abcReverse3.csv
  for f in $(ls -v $1/aigReverse3); do
    echo checking $f
    result=$(../abc/build/abc -c "read_aiger $1/aigReverse3/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abcReverse3.csv
  done
}

$RAND && $BASIC && $ABC && {
  rm -f $1/abcRand.csv
  for f in $(ls -v $1/aigRand); do
    result=$(../abc/build/abc -c "read_aiger $1/aigRand/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abcRand.csv
  done
}

$RAND && $GOBLIN3 && $ABC && {
  rm -f $1/abcRand3.csv
  for f in $(ls -v $1/aigRand3); do
    result=$(../abc/build/abc -c "read_aiger $1/aigRand3/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abcRand3.csv
  done
}

$RAND && $BASIC && $ABC_REV && {
  rm -f $1/abcReverseRand.csv
  for f in $(ls -v $1/aigReverseRand); do
    result=$(../abc/build/abc -c "read_aiger $1/aigReverseRand/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abcReverseRand.csv
  done
}

$RAND && $GOBLIN3 && $ABC_REV && {
  rm -f $1/abcReverseRand3.csv
  for f in $(ls -v $1/aigReverseRand3); do
    result=$(../abc/build/abc -c "read_aiger $1/aigReverseRand3/$f; pdr -T 60" | grep -E '^Property|^Output')
    {
      echo -n -e "$f\t"
      echo -n -e "$(($(echo $result | sed -r 's/.*Time =\s+([^ ]+).*/\1/')*1000))\t"
      if echo $result | grep Output > /dev/null; then
        echo 1
      elif echo $result | grep prove > /dev/null; then
        echo 0
      else
        echo -2
      fi
    } >> $1/abcReverseRand3.csv
  done
}

# ./build/file-solver-1 $1/sepDelaying3 > $1/dantoniSat3.csv
# ./build/file-solver-1 $1/sepDelaying3 > $1/dantoniBdd3.csv
# ./build/file-solver-1 $1/sepDelaying3 > $1/dantoniSatBdd3.csv

# ./build/file-solver-1-2 $1/sepDelaying3 $1/afaCnf3 > $1/dantoni3-afasat3.csv


# ./build/file-solver-2 $1/afaCnf > $1/afasat.csv
# ./build/file-solver-2 $1/afaCnf3Part > $1/afasat3Part.csv

# ./build/file-solver-3 $1/afaCnfPart > $1/afasatClausalPart.csv
# ./build/file-solver-3 $1/afaCnf3Part > $1/afasatClausal3Part.csv

# ./build/file-solver-1 $1/sepDelayingPart >> $1/dantoniPart.csv
# ./build/file-solver-1 $1/sepDelaying3Part >> $1/dantoni3Part.csv

cd ../JAltImpact

$NRAND && $BASIC && $JIMPACT && {
  rm -f $1/jimpact.csv
  for f in $(ls -v $1/ada); do
    echo checking $f
    cp $1/ada/$f /tmp/jimpact.ada
    timeout 60 ant -Dmodel.path=/tmp/jimpact.ada > /tmp/jimpact.log
    result=$?
    {
      echo -n -e "$f\t"
      if [ $result = 124 ]; then
        echo -e "60000\t-2"
      else
        if cat /tmp/jimpact.log | grep 'NOT EMPTY' > /dev/null; then
          echo -n -e "$(cat /tmp/jimpact.log | grep 'Time Cost' | sed 's/.*: //')\t"
          echo 1
        elif cat /tmp/jimpact.log | grep 'EMPTY' > /dev/null; then
          echo -n -e "$(cat /tmp/jimpact.log | grep 'Time Cost' | sed 's/.*: //')\t"
          echo 0
        else
          echo "60000\t-3"
        fi
      fi
    } >> $1/jimpact.csv
  done
}

$NRAND && $GOBLIN3 && $JIMPACT && {
  rm -f $1/jimpact3.csv
  for f in $(ls -v $1/ada3); do
    echo checking $f
    cp $1/ada3/$f /tmp/jimpact.ada
    timeout 60 ant -Dmodel.path=/tmp/jimpact.ada > /tmp/jimpact.log
    result=$?
    {
      echo -n -e "$f\t"
      if [ $result = 124 ]; then
        echo -e "60000\t-2"
      else
        if cat /tmp/jimpact.log | grep 'NOT EMPTY' > /dev/null; then
          echo -n -e "$(cat /tmp/jimpact.log | grep 'Time Cost' | sed 's/.*: //')\t"
          echo 1
        elif cat /tmp/jimpact.log | grep 'EMPTY' > /dev/null; then
          echo -n -e "$(cat /tmp/jimpact.log | grep 'Time Cost' | sed 's/.*: //')\t"
          echo 0
        else
          echo "60000\t-3"
        fi
      fi
    } >> $1/jimpact3.csv
  done
}

$RAND && $BASIC && $JIMPACT && {
  rm -f $1/jimpactRand.csv
  for f in $(ls -v $1/adaRand); do
    cp $1/adaRand/$f /tmp/jimpact.ada
    timeout 60 ant -Dmodel.path=/tmp/jimpact.ada > /tmp/jimpact.log
    result=$?
    {
      echo -n -e "$f\t"
      if [ $result = 124 ]; then
        echo -e "60000\t-2"
      else
        if cat /tmp/jimpact.log | grep 'NOT EMPTY' > /dev/null; then
          echo -n -e "$(cat /tmp/jimpact.log | grep 'Time Cost' | sed 's/.*: //')\t"
          echo 1
        elif cat /tmp/jimpact.log | grep 'EMPTY' > /dev/null; then
          echo -n -e "$(cat /tmp/jimpact.log | grep 'Time Cost' | sed 's/.*: //')\t"
          echo 0
        else
          echo "60000\t-3"
        fi
      fi
    } >> $1/jimpactRand.csv
  done
}

$RAND && $GOBLIN3 && $JIMPACT && {
  rm -f $1/jimpactRand3.csv
  for f in $(ls -v $1/adaRand3); do
    cp $1/adaRand3/$f /tmp/jimpact.ada
    timeout 60 ant -Dmodel.path=/tmp/jimpact.ada > /tmp/jimpact.log
    result=$?
    {
      echo -n -e "$f\t"
      if [ $result = 124 ]; then
        echo -e "60000\t-2"
      else
        if cat /tmp/jimpact.log | grep 'NOT EMPTY' > /dev/null; then
          echo -n -e "$(cat /tmp/jimpact.log | grep 'Time Cost' | sed 's/.*: //')\t"
          echo 1
        elif cat /tmp/jimpact.log | grep 'EMPTY' > /dev/null; then
          echo -n -e "$(cat /tmp/jimpact.log | grep 'Time Cost' | sed 's/.*: //')\t"
          echo 0
        else
          echo "60000\t-3"
        fi
      fi
    } >> $1/jimpactRand3.csv
  done
}
